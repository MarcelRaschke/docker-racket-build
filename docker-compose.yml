version: "3.2"

services:

  # TODO: From-source builds aren't included yet, but they're not difficult to
  # add. Neither are minimal-with-prebuilt-pkgs installations, unix-style
  # installations, or tests for installation uninstall scripts. Doing this
  # after making the test runner container would be sensible.

  # TODO: Both installer downloads and package downloads could conceivably be
  # cached. Should wait until after test runner container is implemented.

  xvfb:
    build:
      context: .
      dockerfile: Dockerfile.xvfb
    # x11vnc requires a shared IPC namespace with the X server it proxies
    ipc: host
  x11vnc:
    build:
      context: .
      dockerfile: Dockerfile.x11vnc
    ipc: host
    environment:
      DISPLAY: xvfb:0.0
    depends_on:
      - xvfb
  websockify:
    # TODO: This image was chosen via a lazy google search and may break at any
    # time without warning.
    image: efrecon/websockify
    command: 50000 x11vnc:5900
    ports:
      - "50000:50000"
    depends_on:
      - x11vnc
  novnc:
    build:
      context: .
      dockerfile: Dockerfile.novnc
    volumes:
      - nginx-html:/usr/share/novnc
  nginx:
    image: nginx
    ports:
      - "80:80"
    volumes:
      - ./novnc-proxy.conf:/etc/nginx/conf.d/default.conf:ro
      # The nocopy option is needed to ensure that novnc's preexisting files
      # are copied into the nginx-html volume, then copied from the nginx-html
      # volume into the nginx contaier itself. Without nocopy, nginx's files in
      # the /usr/share/nginx/html directory could get copied into the volume
      # instead of the other way around. Technically the read-only option and
      # the dependency on novnc (ensuring novnc uses the volume first) should
      # prevent that from happening, but that's a little too magic to rely on.
      - nginx-html:/usr/share/nginx/html:ro,nocopy
    depends_on:
      - novnc
      - websockify

  docker-compose:
    image: docker-compose
    build:
      context: .
      dockerfile: Dockerfile.compose

  racket-test-runner:
    build:
      context: ./test-runner
      dockerfile: Dockerfile.test-runner
      args:
        DOCKER_COMPOSE_IMAGE: docker-compose
    environment:
      COMPOSE_PROJECT_NAME: rackettest
      RACKET_GUI_X11_HOST: xvfb
      RACKET_GUI_X11_NETWORK: "${COMPOSE_PROJECT_NAME}_default"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - xvfb
    command: racket-x86

  racket-x86:
    image: racket-x86
    build:
      context: .
      dockerfile: Dockerfile.installer
      # We use a YAML anchor for the build args to set a common version,
      # installer website, and installer path for building all installation
      # service images. See racket-x86-minimal.build.args for an example of how
      # the anchor is used.
      args: &default-build-args
        RACKET_VERSION: "${RACKET_VERSION}"
        RACKET_INSTALLER_HOST: "${RACKET_INSTALLER_HOST}"
        RACKET_INSTALLER_PATH_PREFIX: "${RACKET_INSTALLER_PATH_PREFIX}"
        RACKET_INSTALLER_PLATFORM: "${RACKET_PLATFORM_LINUX_64}"
        RACKET_INSTALLER_DIST: "${RACKET_DIST_FULL}"
    command: racket -e '(+ 1 2)'

  racket-x86-minimal:
    image: racket-x86-minimal
    build:
      context: .
      dockerfile: Dockerfile.installer
      args:
        # We import the default build args and overwrite the desired platform
        # and distribution type. The platform defaults to x86_64 linux already
        # but the goal of default-build-args is just to set where installers are
        # downloaded, not specify a default platform and distribution.
        # Unfortunately, it's hard to include some keys and not others in an
        # anchor so we accept a little apparent redundancy.
        <<: *default-build-args
        RACKET_INSTALLER_PLATFORM: "${RACKET_PLATFORM_LINUX_64}"
        RACKET_INSTALLER_DIST: "${RACKET_DIST_MINIMAL}"
    command: racket -e '(+ 1 2)'

  racket-i386:
    image: racket-i386
    build:
      context: .
      dockerfile: Dockerfile.installer
      args:
        <<: *default-build-args
        # Base images changed to i386 variants, as using the default images
        # won't compile due to architecture assumptions.
        RACKET_IMAGE_FOR_INSTALLER: i386/buildpack-deps
        RACKET_IMAGE_FOR_RUNTIME: i386/buildpack-deps
        RACKET_INSTALLER_PLATFORM: "${RACKET_PLATFORM_LINUX_32}"
        RACKET_INSTALLER_DIST: "${RACKET_DIST_FULL}"
    command: racket -e '(+ 1 2)'

  racket-i386-minimal:
    image: racket-i386-minimal
    build:
      context: .
      dockerfile: Dockerfile.installer
      args:
        <<: *default-build-args
        RACKET_IMAGE_FOR_INSTALLER: i386/buildpack-deps
        RACKET_IMAGE_FOR_RUNTIME: i386/buildpack-deps
        RACKET_INSTALLER_PLATFORM: "${RACKET_PLATFORM_LINUX_32}"
        RACKET_INSTALLER_DIST: "${RACKET_DIST_MINIMAL}"
    command: racket -e '(+ 1 2)'

  racket-x86-natipkg:
    image: racket-x86-natipkg
    build:
      context: .
      dockerfile: Dockerfile.installer
      args:
        <<: *default-build-args
        RACKET_INSTALLER_PLATFORM: "${RACKET_PLATFORM_LINUX_NATIPKG_64}"
        RACKET_INSTALLER_DIST: "${RACKET_DIST_FULL}"
    command: racket -e '(+ 1 2)'

  racket-x86-natipkg-minimal:
    image: racket-x86-natipkg-minimal
    build:
      context: .
      dockerfile: Dockerfile.installer
      args:
        <<: *default-build-args
        RACKET_INSTALLER_PLATFORM: "${RACKET_PLATFORM_LINUX_NATIPKG_64}"
        RACKET_INSTALLER_DIST: "${RACKET_DIST_MINIMAL}"
    command: racket -e '(+ 1 2)'

volumes:
  nginx-html:
